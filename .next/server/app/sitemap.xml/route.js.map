{"version":3,"file":"../app/sitemap.xml/route.js","mappings":"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","sources":["webpack://next-js-boilerplate/external commonjs \"next/dist/server/app-render/after-task-async-storage.external.js\"","webpack://next-js-boilerplate/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js","webpack://next-js-boilerplate/./src/utils/AppConfig.ts","webpack://next-js-boilerplate/external commonjs \"next/dist/compiled/next-server/app-page.runtime.prod.js\"","webpack://next-js-boilerplate/external commonjs \"next/dist/server/app-render/work-async-storage.external.js\"","webpack://next-js-boilerplate/./src/libs/I18nRouting.ts","webpack://next-js-boilerplate/external commonjs \"next/dist/compiled/next-server/app-route.runtime.prod.js\"","webpack://next-js-boilerplate/./node_modules/next/dist/build/webpack/loaders/metadata/resolve-route-data.js","webpack://next-js-boilerplate/external commonjs \"next/dist/server/app-render/work-unit-async-storage.external.js\"","webpack://next-js-boilerplate/./src/app/sitemap.ts","webpack://next-js-boilerplate/?5ee2","webpack://next-js-boilerplate/?3e63","webpack://next-js-boilerplate/./src/utils/Helpers.ts"],"sourcesContent":["module.exports = require(\"next/dist/server/app-render/after-task-async-storage.external.js\");","\"use strict\";\nif (process.env.NEXT_RUNTIME === 'edge') {\n    module.exports = require('next/dist/server/route-modules/app-route/module.js');\n} else {\n    if (process.env.__NEXT_EXPERIMENTAL_REACT) {\n        if (process.env.NODE_ENV === 'development') {\n            if (process.env.TURBOPACK) {\n                module.exports = require('next/dist/compiled/next-server/app-route-turbo-experimental.runtime.dev.js');\n            } else {\n                module.exports = require('next/dist/compiled/next-server/app-route-experimental.runtime.dev.js');\n            }\n        } else {\n            if (process.env.TURBOPACK) {\n                module.exports = require('next/dist/compiled/next-server/app-route-turbo-experimental.runtime.prod.js');\n            } else {\n                module.exports = require('next/dist/compiled/next-server/app-route-experimental.runtime.prod.js');\n            }\n        }\n    } else {\n        if (process.env.NODE_ENV === 'development') {\n            if (process.env.TURBOPACK) {\n                module.exports = require('next/dist/compiled/next-server/app-route-turbo.runtime.dev.js');\n            } else {\n                module.exports = require('next/dist/compiled/next-server/app-route.runtime.dev.js');\n            }\n        } else {\n            if (process.env.TURBOPACK) {\n                module.exports = require('next/dist/compiled/next-server/app-route-turbo.runtime.prod.js');\n            } else {\n                module.exports = require('next/dist/compiled/next-server/app-route.runtime.prod.js');\n            }\n        }\n    }\n}\n\n//# sourceMappingURL=module.compiled.js.map","import type { LocalizationResource } from '@clerk/types';\r\nimport type { LocalePrefixMode } from 'next-intl/routing';\r\nimport { deDE, enUS, frFR, itIT, jaJP, koKR, ruRU, zhCN, zhTW } from '@clerk/localizations';\r\n\r\nconst localePrefix: LocalePrefixMode = 'never';\r\n\r\n// FIXME: Update this configuration file based on your project information\r\n\r\nconst localesMap: Record<string, string> = {\r\n  'en': 'English',\r\n  'zh': '简体中文',\r\n  'zh-hant': '繁體中文',\r\n  'de': 'Deutsch',\r\n  'fr': 'Français',\r\n  'it': 'Italiano',\r\n  'ja': '日本語',\r\n  'ko': '한국어',\r\n  'ru': 'Русский',\r\n};\r\n\r\nexport const AppConfig = {\r\n  name: 'Nextjs Starter',\r\n  localesMap,\r\n  locales: Object.keys(localesMap),\r\n  defaultLocale: 'en',\r\n  localePrefix,\r\n};\r\n\r\nconst supportedLocales: Record<string, LocalizationResource> = {\r\n  en: enUS,\r\n  zh: zhCN,\r\n  zh_tw: zhTW,\r\n  de: deDE,\r\n  fr: frFR,\r\n  it: itIT,\r\n  ja: jaJP,\r\n  ko: koKR,\r\n  ru: ruRU,\r\n};\r\n\r\nexport const ClerkLocalizations = {\r\n  defaultLocale: enUS,\r\n  supportedLocales,\r\n};\r\n","module.exports = require(\"next/dist/compiled/next-server/app-page.runtime.prod.js\");","module.exports = require(\"next/dist/server/app-render/work-async-storage.external.js\");","import { defineRouting } from 'next-intl/routing';\r\nimport { AppConfig } from '@/utils/AppConfig';\r\n\r\nexport const routing = defineRouting({\r\n  locales: AppConfig.locales,\r\n  localePrefix: AppConfig.localePrefix,\r\n  defaultLocale: AppConfig.defaultLocale,\r\n});\r\n","module.exports = require(\"next/dist/compiled/next-server/app-route.runtime.prod.js\");","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    resolveManifest: null,\n    resolveRobots: null,\n    resolveRouteData: null,\n    resolveSitemap: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    resolveManifest: function() {\n        return resolveManifest;\n    },\n    resolveRobots: function() {\n        return resolveRobots;\n    },\n    resolveRouteData: function() {\n        return resolveRouteData;\n    },\n    resolveSitemap: function() {\n        return resolveSitemap;\n    }\n});\nconst _utils = require(\"../../../../lib/metadata/generate/utils\");\nfunction resolveRobots(data) {\n    let content = '';\n    const rules = Array.isArray(data.rules) ? data.rules : [\n        data.rules\n    ];\n    for (const rule of rules){\n        const userAgent = (0, _utils.resolveArray)(rule.userAgent || [\n            '*'\n        ]);\n        for (const agent of userAgent){\n            content += `User-Agent: ${agent}\\n`;\n        }\n        if (rule.allow) {\n            const allow = (0, _utils.resolveArray)(rule.allow);\n            for (const item of allow){\n                content += `Allow: ${item}\\n`;\n            }\n        }\n        if (rule.disallow) {\n            const disallow = (0, _utils.resolveArray)(rule.disallow);\n            for (const item of disallow){\n                content += `Disallow: ${item}\\n`;\n            }\n        }\n        if (rule.crawlDelay) {\n            content += `Crawl-delay: ${rule.crawlDelay}\\n`;\n        }\n        content += '\\n';\n    }\n    if (data.host) {\n        content += `Host: ${data.host}\\n`;\n    }\n    if (data.sitemap) {\n        const sitemap = (0, _utils.resolveArray)(data.sitemap);\n        // TODO-METADATA: support injecting sitemap url into robots.txt\n        sitemap.forEach((item)=>{\n            content += `Sitemap: ${item}\\n`;\n        });\n    }\n    return content;\n}\nfunction resolveSitemap(data) {\n    const hasAlternates = data.some((item)=>Object.keys(item.alternates ?? {}).length > 0);\n    const hasImages = data.some((item)=>{\n        var _item_images;\n        return Boolean((_item_images = item.images) == null ? void 0 : _item_images.length);\n    });\n    const hasVideos = data.some((item)=>{\n        var _item_videos;\n        return Boolean((_item_videos = item.videos) == null ? void 0 : _item_videos.length);\n    });\n    let content = '';\n    content += '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n';\n    content += '<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"';\n    if (hasImages) {\n        content += ' xmlns:image=\"http://www.google.com/schemas/sitemap-image/1.1\"';\n    }\n    if (hasVideos) {\n        content += ' xmlns:video=\"http://www.google.com/schemas/sitemap-video/1.1\"';\n    }\n    if (hasAlternates) {\n        content += ' xmlns:xhtml=\"http://www.w3.org/1999/xhtml\">\\n';\n    } else {\n        content += '>\\n';\n    }\n    for (const item of data){\n        var _item_alternates, _item_images, _item_videos;\n        content += '<url>\\n';\n        content += `<loc>${item.url}</loc>\\n`;\n        const languages = (_item_alternates = item.alternates) == null ? void 0 : _item_alternates.languages;\n        if (languages && Object.keys(languages).length) {\n            // Since sitemap is separated from the page rendering, there's not metadataBase accessible yet.\n            // we give the default setting that won't effect the languages resolving.\n            for(const language in languages){\n                content += `<xhtml:link rel=\"alternate\" hreflang=\"${language}\" href=\"${languages[language]}\" />\\n`;\n            }\n        }\n        if ((_item_images = item.images) == null ? void 0 : _item_images.length) {\n            for (const image of item.images){\n                content += `<image:image>\\n<image:loc>${image}</image:loc>\\n</image:image>\\n`;\n            }\n        }\n        if ((_item_videos = item.videos) == null ? void 0 : _item_videos.length) {\n            for (const video of item.videos){\n                let videoFields = [\n                    `<video:video>`,\n                    `<video:title>${video.title}</video:title>`,\n                    `<video:thumbnail_loc>${video.thumbnail_loc}</video:thumbnail_loc>`,\n                    `<video:description>${video.description}</video:description>`,\n                    video.content_loc && `<video:content_loc>${video.content_loc}</video:content_loc>`,\n                    video.player_loc && `<video:player_loc>${video.player_loc}</video:player_loc>`,\n                    video.duration && `<video:duration>${video.duration}</video:duration>`,\n                    video.view_count && `<video:view_count>${video.view_count}</video:view_count>`,\n                    video.tag && `<video:tag>${video.tag}</video:tag>`,\n                    video.rating && `<video:rating>${video.rating}</video:rating>`,\n                    video.expiration_date && `<video:expiration_date>${video.expiration_date}</video:expiration_date>`,\n                    video.publication_date && `<video:publication_date>${video.publication_date}</video:publication_date>`,\n                    video.family_friendly && `<video:family_friendly>${video.family_friendly}</video:family_friendly>`,\n                    video.requires_subscription && `<video:requires_subscription>${video.requires_subscription}</video:requires_subscription>`,\n                    video.live && `<video:live>${video.live}</video:live>`,\n                    video.restriction && `<video:restriction relationship=\"${video.restriction.relationship}\">${video.restriction.content}</video:restriction>`,\n                    video.platform && `<video:platform relationship=\"${video.platform.relationship}\">${video.platform.content}</video:platform>`,\n                    video.uploader && `<video:uploader${video.uploader.info && ` info=\"${video.uploader.info}\"`}>${video.uploader.content}</video:uploader>`,\n                    `</video:video>\\n`\n                ].filter(Boolean);\n                content += videoFields.join('\\n');\n            }\n        }\n        if (item.lastModified) {\n            const serializedDate = item.lastModified instanceof Date ? item.lastModified.toISOString() : item.lastModified;\n            content += `<lastmod>${serializedDate}</lastmod>\\n`;\n        }\n        if (item.changeFrequency) {\n            content += `<changefreq>${item.changeFrequency}</changefreq>\\n`;\n        }\n        if (typeof item.priority === 'number') {\n            content += `<priority>${item.priority}</priority>\\n`;\n        }\n        content += '</url>\\n';\n    }\n    content += '</urlset>\\n';\n    return content;\n}\nfunction resolveManifest(data) {\n    return JSON.stringify(data);\n}\nfunction resolveRouteData(data, fileType) {\n    if (fileType === 'robots') {\n        return resolveRobots(data);\n    }\n    if (fileType === 'sitemap') {\n        return resolveSitemap(data);\n    }\n    if (fileType === 'manifest') {\n        return resolveManifest(data);\n    }\n    return '';\n}\n\n//# sourceMappingURL=resolve-route-data.js.map","module.exports = require(\"next/dist/server/app-render/work-unit-async-storage.external.js\");","import type { MetadataRoute } from 'next';\r\nimport { getBaseUrl } from '@/utils/Helpers';\r\n\r\nexport default function sitemap(): MetadataRoute.Sitemap {\r\n  return [\r\n    {\r\n      url: `${getBaseUrl()}/`,\r\n      lastModified: new Date(),\r\n      changeFrequency: 'daily',\r\n      priority: 0.7,\r\n    },\r\n    // Add more URLs here\r\n  ];\r\n}\r\n","import { NextResponse } from 'next/server'\nimport * as userland from \"D:\\\\Desktop\\\\getsany\\\\src\\\\app\\\\sitemap.ts\"\nimport { resolveRouteData } from 'next/dist/build/webpack/loaders/metadata/resolve-route-data'\n\nconst sitemapModule = { ...userland }\nconst handler = sitemapModule.default\nconst contentType = \"application/xml\"\nconst fileType = \"sitemap\"\n\n\n  if (typeof handler !== 'function') {\n    throw new Error('Default export is missing in \"D:\\\\Desktop\\\\getsany\\\\src\\\\app\\\\sitemap.ts\"')\n  }\n  \n\n\nexport async function GET(_, ctx) {\n  const { __metadata_id__: id, ...params } = await ctx.params || {}\n  const hasXmlExtension = id ? id.endsWith('.xml') : false\n\n  if (id && !hasXmlExtension) {\n    return new NextResponse('Not Found', {\n      status: 404,\n    })\n  }\n\n  if (process.env.NODE_ENV !== 'production' && sitemapModule.generateSitemaps) {\n    const sitemaps = await sitemapModule.generateSitemaps()\n    for (const item of sitemaps) {\n      if (item?.id == null) {\n        throw new Error('id property is required for every item returned from generateSitemaps')\n      }\n    }\n  }\n\n  const targetId = id && hasXmlExtension ? id.slice(0, -4) : undefined\n\n  const data = await handler({ id: targetId })\n  const content = resolveRouteData(data, fileType)\n\n  return new NextResponse(content, {\n    headers: {\n      'Content-Type': contentType,\n      'Cache-Control': \"public, max-age=0, must-revalidate\",\n    },\n  })\n}\n\n\n","import { AppRouteRouteModule } from \"next/dist/server/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/server/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/server/lib/patch-fetch\";\nimport * as userland from \"next-metadata-route-loader?filePath=D%3A%5CDesktop%5Cgetsany%5Csrc%5Capp%5Csitemap.ts&isDynamicRouteExtension=1!?__next_metadata_route__\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/sitemap.xml/route\",\n        pathname: \"/sitemap.xml\",\n        filename: \"sitemap\",\n        bundlePath: \"app/sitemap.xml/route\"\n    },\n    resolvedPagePath: \"next-metadata-route-loader?filePath=D%3A%5CDesktop%5Cgetsany%5Csrc%5Capp%5Csitemap.ts&isDynamicRouteExtension=1!?__next_metadata_route__\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return _patchFetch({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\nexport { routeModule, workAsyncStorage, workUnitAsyncStorage, serverHooks, patchFetch,  };\n\n//# sourceMappingURL=app-route.js.map","import { routing } from '@/libs/I18nRouting';\r\n\r\nexport const getBaseUrl = () => {\r\n  if (process.env.NEXT_PUBLIC_APP_URL) {\r\n    return process.env.NEXT_PUBLIC_APP_URL;\r\n  }\r\n\r\n  if (\r\n    process.env.VERCEL_ENV === 'production'\r\n    && process.env.VERCEL_PROJECT_PRODUCTION_URL\r\n  ) {\r\n    return `https://${process.env.VERCEL_PROJECT_PRODUCTION_URL}`;\r\n  }\r\n\r\n  if (process.env.VERCEL_URL) {\r\n    return `https://${process.env.VERCEL_URL}`;\r\n  }\r\n\r\n  return 'http://localhost:3000';\r\n};\r\n\r\nexport const getI18nPath = (url: string, locale: string) => {\r\n  if (locale === routing.defaultLocale) {\r\n    return url;\r\n  }\r\n\r\n  return `/${locale}${url}`;\r\n};\r\n"],"names":["localesMap","AppConfig","name","locales","Object","keys","defaultLocale","localePrefix","en","enUS","zh","zhCN","zh_tw","zhTW","de","deDE","fr","frFR","it","itIT","ja","jaJP","ko","koKR","ru","ruRU","ClerkLocalizations","supportedLocales","routing","defineRouting","sitemap","url","getBaseUrl","lastModified","Date","changeFrequency","priority","env","NEXT_PUBLIC_APP_URL","process","VERCEL_ENV","VERCEL_PROJECT_PRODUCTION_URL","VERCEL_URL","getI18nPath","locale"],"sourceRoot":""}